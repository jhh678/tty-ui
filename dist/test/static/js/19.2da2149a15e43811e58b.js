webpackJsonp([19],{545:function(n,e,s){s(840);var t=s(33)(s(887),s(803),null,null);t.options.__file="E:\\workspace\\Git\\console.cloud.ttyun.com\\src\\views\\demo\\message.vue",t.esModule&&Object.keys(t.esModule).some(function(n){return"default"!==n&&"__esModule"!==n})&&console.error("named exports are not supported in *.vue files."),t.options.functional&&console.error("[vue-loader] message.vue: functional components are not supported with templates, they should use render functions."),n.exports=t.exports},750:function(n,e,s){e=n.exports=s(530)(!1),e.push([n.i,"",""])},803:function(n,e,s){n.exports={render:function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"sub-page-wrap"},[s("h3",[n._v("Message 消息提示")]),n._v(" "),s("p",[n._v("常用于主动操作后的反馈提示。")]),n._v(" "),s("div",{staticClass:"panel panel-default"},[n._m(0),n._v(" "),s("div",{staticClass:"panel-body"},[s("button",{staticClass:"btn btn-default",on:{click:n.openBasic}},[n._v("打开消息提示")]),n._v(" "),s("button",{staticClass:"btn btn-default",on:{click:n.openVNode}},[n._v("VNode")]),n._v(" "),n._m(1),n._v(" "),s("pre",[n._v("        openBasic() {\n          this.$message('这是一条消息提示')\n        },\n        openVNode() {\n          const h = this.$createElement\n          this.$message({\n            message: h('p', null, [\n              h('span', null, '内容可以是 '),\n              h('i', { style: 'color: teal' }, 'VNode')\n            ])\n          })\n        }\n      ")])])]),n._v(" "),s("div",{staticClass:"panel panel-default"},[n._m(2),n._v(" "),s("div",{staticClass:"panel-body"},[s("button",{staticClass:"btn btn-default",on:{click:n.openSuccess}},[n._v("成功")]),n._v(" "),s("button",{staticClass:"btn btn-default",on:{click:n.openWarning}},[n._v("警告")]),n._v(" "),s("button",{staticClass:"btn btn-default",on:{click:n.openInfo}},[n._v("消息")]),n._v(" "),s("button",{staticClass:"btn btn-default",on:{click:n.openError}},[n._v("错误")]),n._v(" "),n._m(3),n._v(" "),s("pre",[n._v("        openSuccess() {\n          this.$message({\n            showClose: true, // 显示关闭按钮\n            duration: 0, // 为0是不会自动关闭\n            message: '恭喜你，这是一条成功消息',\n            type: 'success'\n          })\n        },\n        openWarning() {\n          this.$message({\n            message: '警告哦，这是一条警告消息',\n            type: 'warning'\n          })\n        },\n        openInfo() {\n          this.$message('这是一条消息提示')\n        },\n        openError() {\n          this.$message.error('错了哦，这是一条错误消息')\n        }\n      ")])])]),n._v(" "),s("div",{staticClass:"panel panel-default"},[n._m(4),n._v(" "),s("div",{staticClass:"panel-body"},[s("button",{staticClass:"btn btn-default",on:{click:n.openWithHtml}},[n._v("使用 HTML 片段")]),n._v(" "),n._m(5),n._v(" "),s("pre",[n._v("        openWithHtml() {\n          this.$message({\n            dangerouslyUseHTMLString: true,\n            message: '<strong>这是 <i>HTML</i> 片段</strong>'\n          })\n        }\n      ")])])]),n._v(" "),n._m(6),n._v(" "),n._m(7)])},staticRenderFns:[function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"panel-heading"},[s("h4",{staticClass:"panel-title"},[n._v("基础用法")]),n._v(" "),s("p",[n._v("从顶部出现，3 秒后自动消失。")])])},function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"panel panel-default"},[s("div",{staticClass:"panel-body"},[n._v("\n          Element 注册了一个$message方法用于调用，Message 可以接收一个字符串或一个 VNode 作为参数，它会被显示为正文内容。       \n        ")])])},function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"panel-heading"},[s("h4",{staticClass:"panel-title"},[n._v("不同状态")]),n._v(" "),s("p",[n._v("用来显示「成功、警告、消息、错误」类的操作反馈。")])])},function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"panel"},[s("div",{staticClass:"panel-body"},[n._v("\n          当需要自定义更多属性时，Message 也可以接收一个对象为参数。比如，设置type字段可以定义不同的状态，默认为info。此时正文内容以message的值传入。同时，我们也为 Message 的各种 type 注册了方法，可以在不传入type字段的情况下像openError那样直接调用。\n        ")])])},function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"panel-heading"},[s("h4",{staticClass:"panel-title"},[n._v("使用 HTML 片段")]),n._v(" "),s("p",[n._v("message 属性支持传入 HTML 片段")])])},function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"panel"},[s("div",{staticClass:"panel-body"},[n._v("\n          将dangerouslyUseHTMLString属性设置为 true，message 就会被当作 HTML 片段处理。\n        ")])])},function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"panel panel-default"},[s("div",{staticClass:"panel-heading"},[s("h4",{staticClass:"panel-title"},[n._v("全局方法")])]),n._v(" "),s("div",{staticClass:"panel-body"},[n._v("\n      Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。\n    ")])])},function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{staticClass:"panel panel-default"},[s("div",{staticClass:"panel-heading"},[s("h4",{staticClass:"panel-title"},[n._v("单独引用")])]),n._v(" "),s("div",{staticClass:"panel-body"},[s("pre",[n._v("import Message from '@/components/message'")]),n._v(" "),s("p",[n._v("此时调用方法为 Message(options)。我们也为每个 type 定义了各自的方法，如 Message.success(options)。 并且可以调用 Message.closeAll() 手动关闭所有实例。")])])])}]},n.exports.render._withStripped=!0},840:function(n,e,s){var t=s(750);"string"==typeof t&&(t=[[n.i,t,""]]),t.locals&&(n.exports=t.locals);s(531)("9506d950",t,!1)},887:function(n,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var t=function(){var n="E:\\workspace\\Git\\console.cloud.ttyun.com\\src\\views\\demo\\message.vue",e="8e695d76ab01fe484fa047b7c03df3c596ec517f",s=new Function("return this")(),t="__coverage__",a={path:"E:\\workspace\\Git\\console.cloud.ttyun.com\\src\\views\\demo\\message.vue",statementMap:{0:{start:{line:118,column:4},end:{line:118,column:13}},1:{start:{line:122,column:6},end:{line:122,column:31}},2:{start:{line:125,column:16},end:{line:125,column:35}},3:{start:{line:126,column:6},end:{line:131,column:8}},4:{start:{line:134,column:6},end:{line:139,column:8}},5:{start:{line:142,column:6},end:{line:145,column:8}},6:{start:{line:148,column:6},end:{line:148,column:31}},7:{start:{line:151,column:6},end:{line:151,column:41}},8:{start:{line:154,column:6},end:{line:157,column:8}}},fnMap:{},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0},f:{},b:{},inputSourceMap:{version:3,sources:["message.vue?2f14bdd8"],names:[],mappings:";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",sourcesContent:['<template>\r\n  <div class="sub-page-wrap">\r\n    <h3>Message 消息提示</h3>\r\n    <p>常用于主动操作后的反馈提示。</p>\r\n    <div class="panel panel-default">\r\n      <div class="panel-heading">\r\n        <h4 class="panel-title">基础用法</h4>\r\n        <p>从顶部出现，3 秒后自动消失。</p>\r\n      </div>\r\n      <div class="panel-body">\r\n        <button class="btn btn-default" @click="openBasic">打开消息提示</button>\r\n        <button class="btn btn-default" @click="openVNode">VNode</button>\r\n        <div class="panel panel-default">\r\n          <div class="panel-body">\r\n            Element 注册了一个$message方法用于调用，Message 可以接收一个字符串或一个 VNode 作为参数，它会被显示为正文内容。       \r\n          </div>\r\n        </div>\r\n        <pre>\r\n          openBasic() {\r\n            this.$message(\'这是一条消息提示\')\r\n          },\r\n          openVNode() {\r\n            const h = this.$createElement\r\n            this.$message({\r\n              message: h(\'p\', null, [\r\n                h(\'span\', null, \'内容可以是 \'),\r\n                h(\'i\', { style: \'color: teal\' }, \'VNode\')\r\n              ])\r\n            })\r\n          }\r\n        </pre>\r\n      </div>\r\n    </div>\r\n    <div class="panel panel-default">\r\n      <div class="panel-heading">\r\n        <h4 class="panel-title">不同状态</h4>\r\n        <p>用来显示「成功、警告、消息、错误」类的操作反馈。</p>\r\n      </div>\r\n      <div class="panel-body">\r\n        <button class="btn btn-default" @click="openSuccess">成功</button>\r\n        <button class="btn btn-default" @click="openWarning">警告</button>\r\n        <button class="btn btn-default" @click="openInfo">消息</button>\r\n        <button class="btn btn-default" @click="openError">错误</button>\r\n        <div class="panel">\r\n          <div class="panel-body">\r\n            当需要自定义更多属性时，Message 也可以接收一个对象为参数。比如，设置type字段可以定义不同的状态，默认为info。此时正文内容以message的值传入。同时，我们也为 Message 的各种 type 注册了方法，可以在不传入type字段的情况下像openError那样直接调用。\r\n          </div>\r\n        </div>\r\n        <pre>\r\n          openSuccess() {\r\n            this.$message({\r\n              showClose: true, // 显示关闭按钮\r\n              duration: 0, // 为0是不会自动关闭\r\n              message: \'恭喜你，这是一条成功消息\',\r\n              type: \'success\'\r\n            })\r\n          },\r\n          openWarning() {\r\n            this.$message({\r\n              message: \'警告哦，这是一条警告消息\',\r\n              type: \'warning\'\r\n            })\r\n          },\r\n          openInfo() {\r\n            this.$message(\'这是一条消息提示\')\r\n          },\r\n          openError() {\r\n            this.$message.error(\'错了哦，这是一条错误消息\')\r\n          }\r\n        </pre>\r\n      </div>\r\n    </div>\r\n    <div class="panel panel-default">\r\n      <div class="panel-heading">\r\n        <h4 class="panel-title">使用 HTML 片段</h4>\r\n        <p>message 属性支持传入 HTML 片段</p>\r\n      </div>\r\n      <div class="panel-body">\r\n        <button class="btn btn-default" @click="openWithHtml">使用 HTML 片段</button>\r\n        <div class="panel">\r\n          <div class="panel-body">\r\n            将dangerouslyUseHTMLString属性设置为 true，message 就会被当作 HTML 片段处理。\r\n          </div>\r\n        </div>\r\n        <pre>\r\n          openWithHtml() {\r\n            this.$message({\r\n              dangerouslyUseHTMLString: true,\r\n              message: \'&lt;strong&gt;这是 &lt;i&gt;HTML&lt;/i&gt; 片段&lt;/strong&gt;\'\r\n            })\r\n          }\r\n        </pre>\r\n      </div>\r\n    </div>\r\n    <div class="panel panel-default">\r\n      <div class="panel-heading">\r\n        <h4 class="panel-title">全局方法</h4>\r\n      </div>\r\n      <div class="panel-body">\r\n        Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。\r\n      </div>\r\n    </div>\r\n    <div class="panel panel-default">\r\n      <div class="panel-heading">\r\n        <h4 class="panel-title">单独引用</h4>\r\n      </div>\r\n      <div class="panel-body">\r\n        <pre>import Message from \'@/components/message\'</pre>\r\n        <p>此时调用方法为 Message(options)。我们也为每个 type 定义了各自的方法，如 Message.success(options)。 并且可以调用 Message.closeAll() 手动关闭所有实例。</p>\r\n      </div>\r\n    </div>    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {}\r\n  },\r\n  methods: {\r\n    openBasic() {\r\n      this.$message(\'这是一条消息提示\')\r\n    },\r\n    openVNode() {\r\n      const h = this.$createElement\r\n      this.$message({\r\n        message: h(\'p\', null, [\r\n          h(\'span\', null, \'内容可以是 \'),\r\n          h(\'i\', { style: \'color: teal\' }, \'VNode\')\r\n        ])\r\n      })\r\n    },\r\n    openSuccess() {\r\n      this.$message({\r\n        showClose: true, // 显示关闭按钮\r\n        duration: 0, // 为0是不会自动关闭\r\n        message: \'恭喜你，这是一条成功消息\',\r\n        type: \'success\'\r\n      })\r\n    },\r\n    openWarning() {\r\n      this.$message({\r\n        message: \'警告哦，这是一条警告消息\',\r\n        type: \'warning\'\r\n      })\r\n    },\r\n    openInfo() {\r\n      this.$message(\'这是一条消息提示\')\r\n    },\r\n    openError() {\r\n      this.$message.error(\'错了哦，这是一条错误消息\')\r\n    },\r\n    openWithHtml() {\r\n      this.$message({\r\n        dangerouslyUseHTMLString: true,\r\n        message: \'<strong>这是 <i>HTML</i> 片段</strong>\'\r\n      })\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style>\r\n\r\n</style>\r\n']},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},r=s[t]||(s[t]={});return r[n]&&r[n].hash===e?r[n]:(a.hash=e,r[n]=a)}();e.default={data:function(){return t.s[0]++,{}},methods:{openBasic:function(){t.s[1]++,this.$message("这是一条消息提示")},openVNode:function(){var n=(t.s[2]++,this.$createElement);t.s[3]++,this.$message({message:n("p",null,[n("span",null,"内容可以是 "),n("i",{style:"color: teal"},"VNode")])})},openSuccess:function(){t.s[4]++,this.$message({showClose:!0,duration:0,message:"恭喜你，这是一条成功消息",type:"success"})},openWarning:function(){t.s[5]++,this.$message({message:"警告哦，这是一条警告消息",type:"warning"})},openInfo:function(){t.s[6]++,this.$message("这是一条消息提示")},openError:function(){t.s[7]++,this.$message.error("错了哦，这是一条错误消息")},openWithHtml:function(){t.s[8]++,this.$message({dangerouslyUseHTMLString:!0,message:"<strong>这是 <i>HTML</i> 片段</strong>"})}}}}});
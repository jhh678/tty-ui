webpackJsonp([16],{544:function(n,e,t){t(847);var s=t(33)(t(886),t(813),null,null);s.options.__file="E:\\workspace\\Git\\console.cloud.ttyun.com\\src\\views\\demo\\message-box-demo.vue",s.esModule&&Object.keys(s.esModule).some(function(n){return"default"!==n&&"__esModule"!==n})&&console.error("named exports are not supported in *.vue files."),s.options.functional&&console.error("[vue-loader] message-box-demo.vue: functional components are not supported with templates, they should use render functions."),n.exports=s.exports},757:function(n,e,t){e=n.exports=t(530)(!1),e.push([n.i,"",""])},813:function(n,e,t){n.exports={render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"sub-page-wrap"},[t("h3",[n._v("MessageBox 弹框")]),n._v(" "),t("p",[n._v("模拟系统的消息提示框而实现的一套模态对话框组件，用于消息提示、确认消息和提交内容")]),n._v(" "),n._m(0),n._v(" "),t("div",{staticClass:"panel panel-default"},[n._m(1),n._v(" "),t("div",{staticClass:"panel-body"},[t("button",{staticClass:"btn btn-link",on:{click:n.openAlert}},[n._v("点击打开Message Box(alert)")]),n._v(" "),n._m(2),n._v(" "),t("pre",[n._v("        this.$alert('这是一段内容', '标题名称', {\n          confirmButtonText: '确定',\n          callback: action => {\n            console.log('alert closed')\n          }\n        })\n      ")])])]),n._v(" "),t("div",{staticClass:"panel panel-default"},[n._m(3),n._v(" "),t("div",{staticClass:"panel-body"},[t("button",{staticClass:"btn btn-link",on:{click:n.openConfirm}},[n._v("点击打开Message Box(confirm)")]),n._v(" "),n._m(4),n._v(" "),t("pre",[n._v("        this.$confirm(['删除后数据不可恢复', '确定要删除吗？'], '删除提示').then(() => {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消'\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: '删除成功!'\n          })\n          console.log('删除成功!')\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '已取消删除'\n          })\n          console.log('已取消删除')\n        })\n      ")])])]),n._v(" "),t("div",{staticClass:"panel panel-default"},[n._m(5),n._v(" "),t("div",{staticClass:"panel-body"},[t("button",{staticClass:"btn btn-link",on:{click:n.openPrompt}},[n._v("点击打开Message Box(prompt)")]),n._v(" "),n._m(6),n._v(" "),t("pre",[n._v("        this.$prompt('请输入邮箱', '提示', {\n          messageAlign: 'left',\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n          inputPlaceholder: '请输入邮箱',\n          inputErrorMessage: '邮箱格式不正确'\n        }).then(({ value }) => {\n          this.$message({\n            type: 'success',\n            message: '你的邮箱是: ' + value\n          })\n          console.log(value)\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '取消输入'\n          })\n          console.log('取消输入')\n        })\n      ")])])]),n._v(" "),t("div",{staticClass:"panel panel-default"},[n._m(7),n._v(" "),t("div",{staticClass:"panel-body"},[t("button",{staticClass:"btn btn-link",on:{click:n.openMsgbox}},[n._v("点击打开Message Box(msgbox)")]),n._v(" "),n._m(8),n._v(" "),t("pre",[n._v("        const h = this.$createElement\n        this.$msgbox({\n          title: '消息',\n          message: h('p', null, [\n            h('span', null, '内容可以是 '),\n            h('i', { style: 'color: teal' }, 'VNode')\n          ]),\n          showCancelButton: true,\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          beforeClose: (action, instance, done) => {\n            if (action === 'confirm') {\n              instance.confirmButtonText = '执行中...'\n              setTimeout(() => {\n                done()\n              }, 3000)\n            } else {\n              done()\n            }\n          }\n        }).then(action => {\n          this.$message({\n            type: 'info',\n            message: 'action: ' + action\n          })\n          console.log('action: ' + action)\n        })\n      ")])])]),n._v(" "),t("div",{staticClass:"panel panel-default"},[n._m(9),n._v(" "),t("div",{staticClass:"panel-body"},[t("button",{staticClass:"btn btn-link",on:{click:n.openAlertWithHtml}},[n._v("点击打开Message Box(html)")]),n._v(" "),n._m(10),n._v(" "),n._m(11)])]),n._v(" "),n._m(12),n._v(" "),n._m(13)])},staticRenderFns:[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel panel-default"},[t("div",{staticClass:"panel-body"},[n._v("从场景上说，MessageBox 的作用是美化系统自带的 alert、confirm 和 prompt，因此适合展示较为简单的内容。如果需要弹出较为复杂的内容，请使用 Modal。")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel-heading"},[t("h4",{staticClass:"panel-title"},[n._v("消息提示")]),n._v(" "),t("p",[n._v("当用户进行操作时会被触发，该对话框中断用户操作，直到用户确认知晓后才可关闭。")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel panel-default"},[t("div",{staticClass:"panel-body"},[n._v("\n          调用$alert方法即可打开消息提示，它模拟了系统的 alert，无法通过按下 ESC 或点击框外关闭。此例中接收了两个参数，message和title。值得一提的是，窗口被关闭后，它默认会返回一个Promise对象便于进行后续操作的处理。若不确定浏览器是否支持Promise，可自行引入第三方 polyfill 或像本例一样使用回调进行后续处理。            \n        ")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel-heading"},[t("h4",{staticClass:"panel-title"},[n._v("确认消息")]),n._v(" "),t("p",[n._v("提示用户确认其已经触发的动作，并询问是否进行此操作时会用到此对话框。")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel"},[t("div",{staticClass:"panel-body"},[n._v('\n          调用$confirm方法即可打开消息提示，它模拟了系统的 confirm。Message Box 组件也拥有极高的定制性，我们可以传入options作为第三个参数，它是一个字面量对象。注意，第一个参数可以是一个String类型，也可以是一个String数组；第二个参数title必须定义为String类型(默认值为"操作确认提示")，如果是Object，会被理解为options。在这里我们用了 Promise 来处理后续响应。\n        ')])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel-heading"},[t("h4",{staticClass:"panel-title"},[n._v("提交内容")]),n._v(" "),t("p",[n._v("当用户进行操作时会被触发，中断用户操作，提示用户进行输入的对话框。")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel"},[t("div",{staticClass:"panel-body"},[n._v("\n          调用$prompt方法即可打开消息提示，它模拟了系统的 prompt。可以用inputPattern字段自己规定匹配模式，或者用inputValidator规定校验函数，可以返回Boolean或String，返回false或字符串时均表示校验未通过，同时返回的字符串相当于定义了inputErrorMessage字段。此外，可以用inputPlaceholder字段来定义输入框的占位符。\n        ")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel-heading"},[t("h4",{staticClass:"panel-title"},[n._v("自定义")]),n._v(" "),t("p",[n._v("可自定义配置不同内容。")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel"},[t("div",{staticClass:"panel-body"},[n._v("\n          以上三个方法都是对$msgbox方法的再包装。本例直接调用$msgbox方法，使用了showCancelButton字段，用于显示取消按钮。另外可使用cancelButtonClass为其添加自定义样式，使用cancelButtonText来自定义按钮文本（Confirm 按钮也具有相同的字段，在文末的字段说明中有完整的字段列表）。此例还使用了beforeClose属性，它的值是一个方法，会在 MessageBox 的实例关闭前被调用，同时暂停实例的关闭。它有三个参数：action、实例本身和done方法。使用它能够在关闭前对实例进行一些操作，比如为确定按钮添加loading状态等；此时若需要关闭实例，可以调用done方法（若在beforeClose中没有调用done，则实例不会关闭）。\n        ")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel-heading"},[t("h4",{staticClass:"panel-title"},[n._v("使用 HTML 片段")]),n._v(" "),t("p",[n._v("message 属性支持传入 HTML 片段")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel"},[t("div",{staticClass:"panel-body"},[n._v("\n          将dangerouslyUseHTMLString属性设置为 true，message 就会被当作 HTML 片段处理。\n        ")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",[n._v("        this.$alert('"),t("strong",[n._v("这是 "),t("i",[n._v("HTML")]),n._v(" 片段")]),n._v("', 'HTML 片段', {\n          dangerouslyUseHTMLString: true\n        })\n      ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel panel-default"},[t("div",{staticClass:"panel-heading"},[t("h4",{staticClass:"panel-title"},[n._v("全局方法")]),n._v(" "),t("p",[n._v("现已经全局引入，Vue.prototype 添加如下全局方法：$msgbox, $alert, $confirm 和 $prompt。因此在 Vue instance 中可以采用本页面中的方式调用 MessageBox。调用参数为：")])]),n._v(" "),t("div",{staticClass:"panel-body"},[t("ul",[t("li",[n._v("$msgbox(options)")]),n._v(" "),t("li",[n._v("$alert(message, title, options) 或 $alert(message, options)")]),n._v(" "),t("li",[n._v("$confirm(message, title, options) 或 $confirm(message, options)")]),n._v(" "),t("li",[n._v("$prompt(message, title, options) 或 $prompt(message, options)")])])])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"panel panel-default"},[t("div",{staticClass:"panel-heading"},[t("h4",{staticClass:"panel-title"},[n._v("单独引用")]),n._v(" "),t("p",[n._v("如果单独引入 MessageBox")])]),n._v(" "),t("div",{staticClass:"panel-body"},[t("pre",[n._v("import MessageBox from '@/components/message-box'")]),n._v(" "),t("p",[n._v("那么对应于上述四个全局方法的调用方法依次为：MessageBox, MessageBox.alert, MessageBox.confirm 和 MessageBox.prompt，调用参数与全局方法相同。")])])])}]},n.exports.render._withStripped=!0},847:function(n,e,t){var s=t(757);"string"==typeof s&&(s=[[n.i,s,""]]),s.locals&&(n.exports=s.locals);t(531)("e989e0c8",s,!1)},886:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=function(){var n="E:\\workspace\\Git\\console.cloud.ttyun.com\\src\\views\\demo\\message-box-demo.vue",e="13e43f1752220ed43e5e6ff21e7191d4842f8ee0",t=new Function("return this")(),s="__coverage__",l={path:"E:\\workspace\\Git\\console.cloud.ttyun.com\\src\\views\\demo\\message-box-demo.vue",statementMap:{0:{start:{line:190,column:4},end:{line:190,column:13}},1:{start:{line:194,column:6},end:{line:199,column:8}},2:{start:{line:197,column:10},end:{line:197,column:37}},3:{start:{line:202,column:6},end:{line:214,column:8}},4:{start:{line:203,column:8},end:{line:206,column:10}},5:{start:{line:207,column:8},end:{line:207,column:28}},6:{start:{line:209,column:8},end:{line:212,column:10}},7:{start:{line:213,column:8},end:{line:213,column:28}},8:{start:{line:217,column:6},end:{line:236,column:8}},9:{start:{line:225,column:8},end:{line:228,column:10}},10:{start:{line:229,column:8},end:{line:229,column:26}},11:{start:{line:231,column:8},end:{line:234,column:10}},12:{start:{line:235,column:8},end:{line:235,column:27}},13:{start:{line:239,column:16},end:{line:239,column:35}},14:{start:{line:240,column:6},end:{line:265,column:8}},15:{start:{line:250,column:10},end:{line:257,column:11}},16:{start:{line:251,column:12},end:{line:251,column:49}},17:{start:{line:252,column:12},end:{line:254,column:20}},18:{start:{line:253,column:14},end:{line:253,column:20}},19:{start:{line:256,column:12},end:{line:256,column:18}},20:{start:{line:260,column:8},end:{line:263,column:10}},21:{start:{line:264,column:8},end:{line:264,column:40}},22:{start:{line:268,column:6},end:{line:270,column:8}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:196,column:18},end:{line:196,column:19}},loc:{start:{line:196,column:28},end:{line:198,column:9}},line:196},1:{name:"(anonymous_1)",decl:{start:{line:202,column:59},end:{line:202,column:60}},loc:{start:{line:202,column:65},end:{line:208,column:7}},line:202},2:{name:"(anonymous_2)",decl:{start:{line:208,column:15},end:{line:208,column:16}},loc:{start:{line:208,column:21},end:{line:214,column:7}},line:208},3:{name:"(anonymous_3)",decl:{start:{line:224,column:14},end:{line:224,column:15}},loc:{start:{line:224,column:29},end:{line:230,column:7}},line:224},4:{name:"(anonymous_4)",decl:{start:{line:230,column:15},end:{line:230,column:16}},loc:{start:{line:230,column:21},end:{line:236,column:7}},line:230},5:{name:"(anonymous_5)",decl:{start:{line:249,column:21},end:{line:249,column:22}},loc:{start:{line:249,column:49},end:{line:258,column:9}},line:249},6:{name:"(anonymous_6)",decl:{start:{line:252,column:23},end:{line:252,column:24}},loc:{start:{line:252,column:29},end:{line:254,column:13}},line:252},7:{name:"(anonymous_7)",decl:{start:{line:259,column:14},end:{line:259,column:15}},loc:{start:{line:259,column:24},end:{line:265,column:7}},line:259}},branchMap:{0:{loc:{start:{line:250,column:10},end:{line:257,column:11}},type:"if",locations:[{start:{line:250,column:10},end:{line:257,column:11}},{start:{line:250,column:10},end:{line:257,column:11}}],line:250}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0},b:{0:[0,0]},inputSourceMap:{version:3,sources:["message-box-demo.vue?69b5ed3d"],names:[],mappingssourcesContent:["<template>\r\n  <div class=\"sub-page-wrap\">\r\n    <h3>MessageBox 弹框</h3>\r\n    <p>模拟系统的消息提示框而实现的一套模态对话框组件，用于消息提示、确认消息和提交内容</p>\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-body\">从场景上说，MessageBox 的作用是美化系统自带的 alert、confirm 和 prompt，因此适合展示较为简单的内容。如果需要弹出较为复杂的内容，请使用 Modal。</div>\r\n    </div>\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h4 class=\"panel-title\">消息提示</h4>\r\n        <p>当用户进行操作时会被触发，该对话框中断用户操作，直到用户确认知晓后才可关闭。</p>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <button class=\"btn btn-link\" @click=\"openAlert\">点击打开Message Box(alert)</button>\r\n        <div class=\"panel panel-default\">\r\n          <div class=\"panel-body\">\r\n            调用$alert方法即可打开消息提示，它模拟了系统的 alert，无法通过按下 ESC 或点击框外关闭。此例中接收了两个参数，message和title。值得一提的是，窗口被关闭后，它默认会返回一个Promise对象便于进行后续操作的处理。若不确定浏览器是否支持Promise，可自行引入第三方 polyfill 或像本例一样使用回调进行后续处理。            \r\n          </div>\r\n        </div>\r\n        <pre>\r\n          this.$alert('这是一段内容', '标题名称', {\r\n            confirmButtonText: '确定',\r\n            callback: action => {\r\n              console.log('alert closed')\r\n            }\r\n          })\r\n        </pre>\r\n      </div>\r\n    </div>\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h4 class=\"panel-title\">确认消息</h4>\r\n        <p>提示用户确认其已经触发的动作，并询问是否进行此操作时会用到此对话框。</p>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <button class=\"btn btn-link\" @click=\"openConfirm\">点击打开Message Box(confirm)</button>\r\n        <div class=\"panel\">\r\n          <div class=\"panel-body\">\r\n            调用$confirm方法即可打开消息提示，它模拟了系统的 confirm。Message Box 组件也拥有极高的定制性，我们可以传入options作为第三个参数，它是一个字面量对象。注意，第一个参数可以是一个String类型，也可以是一个String数组；第二个参数title必须定义为String类型(默认值为\"操作确认提示\")，如果是Object，会被理解为options。在这里我们用了 Promise 来处理后续响应。\r\n          </div>\r\n        </div>\r\n        <pre>\r\n          this.$confirm(['删除后数据不可恢复', '确定要删除吗？'], '删除提示').then(() => {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消'\r\n          }).then(() => {\r\n            this.$message({\r\n              type: 'success',\r\n              message: '删除成功!'\r\n            })\r\n            console.log('删除成功!')\r\n          }).catch(() => {\r\n            this.$message({\r\n              type: 'info',\r\n              message: '已取消删除'\r\n            })\r\n            console.log('已取消删除')\r\n          })\r\n        </pre>\r\n      </div>\r\n    </div>\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h4 class=\"panel-title\">提交内容</h4>\r\n        <p>当用户进行操作时会被触发，中断用户操作，提示用户进行输入的对话框。</p>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <button class=\"btn btn-link\" @click=\"openPrompt\">点击打开Message Box(prompt)</button>\r\n        <div class=\"panel\">\r\n          <div class=\"panel-body\">\r\n            调用$prompt方法即可打开消息提示，它模拟了系统的 prompt。可以用inputPattern字段自己规定匹配模式，或者用inputValidator规定校验函数，可以返回Boolean或String，返回false或字符串时均表示校验未通过，同时返回的字符串相当于定义了inputErrorMessage字段。此外，可以用inputPlaceholder字段来定义输入框的占位符。\r\n          </div>\r\n        </div>\r\n        <pre>\r\n          this.$prompt('请输入邮箱', '提示', {\r\n            messageAlign: 'left',\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\r\n            inputPlaceholder: '请输入邮箱',\r\n            inputErrorMessage: '邮箱格式不正确'\r\n          }).then(({ value }) => {\r\n            this.$message({\r\n              type: 'success',\r\n              message: '你的邮箱是: ' + value\r\n            })\r\n            console.log(value)\r\n          }).catch(() => {\r\n            this.$message({\r\n              type: 'info',\r\n              message: '取消输入'\r\n            })\r\n            console.log('取消输入')\r\n          })\r\n        </pre>\r\n      </div>\r\n    </div>\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h4 class=\"panel-title\">自定义</h4>\r\n        <p>可自定义配置不同内容。</p>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <button class=\"btn btn-link\" @click=\"openMsgbox\">点击打开Message Box(msgbox)</button>\r\n        <div class=\"panel\">\r\n          <div class=\"panel-body\">\r\n            以上三个方法都是对$msgbox方法的再包装。本例直接调用$msgbox方法，使用了showCancelButton字段，用于显示取消按钮。另外可使用cancelButtonClass为其添加自定义样式，使用cancelButtonText来自定义按钮文本（Confirm 按钮也具有相同的字段，在文末的字段说明中有完整的字段列表）。此例还使用了beforeClose属性，它的值是一个方法，会在 MessageBox 的实例关闭前被调用，同时暂停实例的关闭。它有三个参数：action、实例本身和done方法。使用它能够在关闭前对实例进行一些操作，比如为确定按钮添加loading状态等；此时若需要关闭实例，可以调用done方法（若在beforeClose中没有调用done，则实例不会关闭）。\r\n          </div>\r\n        </div>\r\n        <pre>\r\n          const h = this.$createElement\r\n          this.$msgbox({\r\n            title: '消息',\r\n            message: h('p', null, [\r\n              h('span', null, '内容可以是 '),\r\n              h('i', { style: 'color: teal' }, 'VNode')\r\n            ]),\r\n            showCancelButton: true,\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            beforeClose: (action, instance, done) => {\r\n              if (action === 'confirm') {\r\n                instance.confirmButtonText = '执行中...'\r\n                setTimeout(() => {\r\n                  done()\r\n                }, 3000)\r\n              } else {\r\n                done()\r\n              }\r\n            }\r\n          }).then(action => {\r\n            this.$message({\r\n              type: 'info',\r\n              message: 'action: ' + action\r\n            })\r\n            console.log('action: ' + action)\r\n          })\r\n        </pre>\r\n      </div>\r\n    </div>\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h4 class=\"panel-title\">使用 HTML 片段</h4>\r\n        <p>message 属性支持传入 HTML 片段</p>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <button class=\"btn btn-link\" @click=\"openAlertWithHtml\">点击打开Message Box(html)</button>\r\n        <div class=\"panel\">\r\n          <div class=\"panel-body\">\r\n            将dangerouslyUseHTMLString属性设置为 true，message 就会被当作 HTML 片段处理。\r\n          </div>\r\n        </div>\r\n        <pre>\r\n          this.$alert('<strong>这是 <i>HTML</i> 片段</strong>', 'HTML 片段', {\r\n            dangerouslyUseHTMLString: true\r\n          })\r\n        </pre>\r\n      </div>\r\n    </div>\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h4 class=\"panel-title\">全局方法</h4>\r\n        <p>现已经全局引入，Vue.prototype 添加如下全局方法：$msgbox, $alert, $confirm 和 $prompt。因此在 Vue instance 中可以采用本页面中的方式调用 MessageBox。调用参数为：</p>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <ul>\r\n          <li>$msgbox(options)</li>\r\n          <li>$alert(message, title, options) 或 $alert(message, options)</li>\r\n          <li>$confirm(message, title, options) 或 $confirm(message, options)</li>\r\n          <li>$prompt(message, title, options) 或 $prompt(message, options)</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-heading\">\r\n        <h4 class=\"panel-title\">单独引用</h4>\r\n        <p>如果单独引入 MessageBox</p>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <pre>import MessageBox from '@/components/message-box'</pre>\r\n        <p>那么对应于上述四个全局方法的调用方法依次为：MessageBox, MessageBox.alert, MessageBox.confirm 和 MessageBox.prompt，调用参数与全局方法相同。</p>\r\n      </div>\r\n    </div>    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {}\r\n  },\r\n  methods: {\r\n    openAlert() {\r\n      this.$alert('这是一段内容', '标题名称', {\r\n        confirmButtonText: '确定',\r\n        callback: action => {\r\n          console.log('alert closed')\r\n        }\r\n      })\r\n    },\r\n    openConfirm() {\r\n      this.$confirm(['删除后数据不可恢复', '确定要删除吗？'], '删除提示').then(() => {\r\n        this.$message({\r\n          type: 'success',\r\n          message: '删除成功!'\r\n        })\r\n        console.log('删除成功!')\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: 'info',\r\n          message: '已取消删除'\r\n        })\r\n        console.log('已取消删除')\r\n      })\r\n    },\r\n    openPrompt() {\r\n      this.$prompt('请输入邮箱', '提示', {\r\n        messageAlign: 'left',\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\r\n        inputPlaceholder: '请输入邮箱',\r\n        inputErrorMessage: '邮箱格式不正确'\r\n      }).then(({ value }) => {\r\n        this.$message({\r\n          type: 'success',\r\n          message: '你的邮箱是: ' + value\r\n        })\r\n        console.log(value)\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: 'info',\r\n          message: '取消输入'\r\n        })\r\n        console.log('取消输入')\r\n      })\r\n    },\r\n    openMsgbox() {\r\n      const h = this.$createElement\r\n      this.$msgbox({\r\n        title: '消息',\r\n        message: h('p', null, [\r\n          h('span', null, '内容可以是 '),\r\n          h('i', { style: 'color: teal' }, 'VNode')\r\n        ]),\r\n        showCancelButton: true,\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        beforeClose: (action, instance, done) => {\r\n          if (action === 'confirm') {\r\n            instance.confirmButtonText = '执行中...'\r\n            setTimeout(() => {\r\n              done()\r\n            }, 3000)\r\n          } else {\r\n            done()\r\n          }\r\n        }\r\n      }).then(action => {\r\n        this.$message({\r\n          type: 'info',\r\n          message: 'action: ' + action\r\n        })\r\n        console.log('action: ' + action)\r\n      })\r\n    },\r\n    openAlertWithHtml() {\r\n      this.$alert('<strong>这是 <i>HTML</i> 片段</strong>', 'HTML 片段', {\r\n        dangerouslyUseHTMLString: true\r\n      })\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style>\r\n\r\n</style>\r\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},o=t[s]||(t[s]={});return o[n]&&o[n].hash===e?o[n]:(l.hash=e,o[n]=l)}();e.default={data:function(){return s.s[0]++,{}},methods:{openAlert:function(){s.s[1]++,this.$alert("这是一段内容","标题名称",{confirmButtonText:"确定",callback:function(n){s.f[0]++,s.s[2]++,console.log("alert closed")}})},openConfirm:function(){var n=this;s.s[3]++,this.$confirm(["删除后数据不可恢复","确定要删除吗？"],"删除提示").then(function(){s.f[1]++,s.s[4]++,n.$message({type:"success",message:"删除成功!"}),s.s[5]++,console.log("删除成功!")}).catch(function(){s.f[2]++,s.s[6]++,n.$message({type:"info",message:"已取消删除"}),s.s[7]++,console.log("已取消删除")})},openPrompt:function(){var n=this;s.s[8]++,this.$prompt("请输入邮箱","提示",{messageAlign:"left",confirmButtonText:"确定",cancelButtonText:"取消",inputPattern:/[\w!#$%&'*+\/=?^_`{|}~-]+(?:\.[\w!#$%&'*+\/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/,inputPlaceholder:"请输入邮箱",inputErrorMessage:"邮箱格式不正确"}).then(function(e){var t=e.value;s.f[3]++,s.s[9]++,n.$message({type:"success",message:"你的邮箱是: "+t}),s.s[10]++,console.log(t)}).catch(function(){s.f[4]++,s.s[11]++,n.$message({type:"info",message:"取消输入"}),s.s[12]++,console.log("取消输入")})},openMsgbox:function(){var n=this,e=(s.s[13]++,this.$createElement);s.s[14]++,this.$msgbox({title:"消息",message:e("p",null,[e("span",null,"内容可以是 "),e("i",{style:"color: teal"},"VNode")]),showCancelButton:!0,confirmButtonText:"确定",cancelButtonText:"取消",beforeClose:function(n,e,t){s.f[5]++,s.s[15]++,"confirm"===n?(s.b[0][0]++,s.s[16]++,e.confirmButtonText="执行中...",s.s[17]++,setTimeout(function(){s.f[6]++,s.s[18]++,t()},3e3)):(s.b[0][1]++,s.s[19]++,t())}}).then(function(e){s.f[7]++,s.s[20]++,n.$message({type:"info",message:"action: "+e}),s.s[21]++,console.log("action: "+e)})},openAlertWithHtml:function(){s.s[22]++,this.$alert("<strong>这是 <i>HTML</i> 片段</strong>","HTML 片段",{dangerouslyUseHTMLString:!0})}}}}});